import numpy as np
import random
import time
from utils.geometry import calculate_angle
from utils.draw_utils import draw_colored_line
from utils.feedback_utils import AIFeedbackManager

# ======================
# ‚öôÔ∏è Kh·ªüi t·∫°o Feedback Manager to√†n c·ª•c
# ======================
feedback_manager = AIFeedbackManager(cooldown=2.0)

form_memory = {
    "lowest_angle": None,
    "rep_active": False,
}

# ======================
# üèãÔ∏è‚Äç‚ôÇÔ∏è Squat Evaluation
# ======================
def evaluate_squat(keypoints, frame=None, stage=None, counter=None):
    left_hip, left_knee, left_ankle = keypoints[11], keypoints[13], keypoints[15]
    right_hip, right_knee, right_ankle = keypoints[12], keypoints[14], keypoints[16]
    left_shoulder, right_shoulder = keypoints[5], keypoints[6]

    # T√≠nh g√≥c trung b√¨nh ƒë·∫ßu g·ªëi
    left_angle = calculate_angle(left_hip, left_knee, left_ankle)
    right_angle = calculate_angle(right_hip, right_knee, right_ankle)
    mean_angle = (left_angle + right_angle) / 2

    issues, score = [], 100
    ok_color, warn_color, err_color = (0, 255, 0), (0, 255, 255), (0, 0, 255)

    if stage == "down":
        form_memory["rep_active"] = True
        if form_memory["lowest_angle"] is None or mean_angle < form_memory["lowest_angle"]:
            form_memory["lowest_angle"] = mean_angle

    if stage == "up" and form_memory["rep_active"]:
        lowest_angle = form_memory["lowest_angle"] or mean_angle

        if lowest_angle > 130:
            issues.append("C·∫ßn h·∫° th·∫•p h∆°n ·ªü l·∫ßn sau.")
            score -= 25
            if frame is not None:
                draw_colored_line(frame, left_hip, left_knee, err_color)

        shoulder_y = (left_shoulder[1] + right_shoulder[1]) / 2
        hip_y = (left_hip[1] + right_hip[1]) / 2
        if shoulder_y - hip_y < 40:
            issues.append("Gi·ªØ l∆∞ng th·∫≥ng h∆°n.")
            score -= 20
            if frame is not None:
                draw_colored_line(frame, left_shoulder, left_hip, warn_color)

        feedback, tone = feedback_manager.get_feedback("squat", score, issues)
        form_memory["rep_active"] = False
        form_memory["lowest_angle"] = None
        return score, feedback, tone

    return 100, feedback_manager.last_feedback, "neutral"


# ======================
# ü§∏‚Äç‚ôÄÔ∏è Push-up Evaluation
# ======================
def evaluate_pushup(keypoints, frame=None, stage=None, counter=None):
    left_shoulder, left_elbow, left_wrist = keypoints[5], keypoints[7], keypoints[9]
    right_shoulder, right_elbow, right_wrist = keypoints[6], keypoints[8], keypoints[10]
    left_hip, right_hip = keypoints[11], keypoints[12]

    left_angle = calculate_angle(left_shoulder, left_elbow, left_wrist)
    right_angle = calculate_angle(right_shoulder, right_elbow, right_wrist)
    mean_angle = (left_angle + right_angle) / 2

    issues, score = [], 100
    ok_color, warn_color, err_color = (0, 255, 0), (0, 255, 255), (0, 0, 255)

    if stage == "down":
        form_memory["rep_active"] = True
        if form_memory["lowest_angle"] is None or mean_angle < form_memory["lowest_angle"]:
            form_memory["lowest_angle"] = mean_angle

    if stage == "up" and form_memory["rep_active"]:
        lowest_angle = form_memory["lowest_angle"] or mean_angle

        if lowest_angle > 100:
            issues.append("Ch∆∞a h·∫° ng∆∞·ªùi ƒë·ªß s√¢u.")
            score -= 20

        shoulder_y = (left_shoulder[1] + right_shoulder[1]) / 2
        hip_y = (left_hip[1] + right_hip[1]) / 2
        if hip_y - shoulder_y > 80:
            issues.append("Gi·ªØ h√¥ng cao h∆°n nh√©.")
            score -= 25
            if frame is not None:
                draw_colored_line(frame, left_hip, left_shoulder, warn_color)

        feedback, tone = feedback_manager.get_feedback("pushup", score, issues)
        form_memory["rep_active"] = False
        form_memory["lowest_angle"] = None
        return score, feedback, tone

    return 100, feedback_manager.last_feedback, "neutral"


# ======================
# üßç‚Äç‚ôÄÔ∏è Plank Evaluation
# ======================
def evaluate_plank(keypoints, frame=None, stage=None, counter=None):
    left_shoulder, left_hip, left_ankle = keypoints[5], keypoints[11], keypoints[15]
    angle = calculate_angle(left_shoulder, left_hip, left_ankle)

    issues, score = [], 100
    color = (0, 255, 0)

    if angle < 160:
        issues.append("H√¥ng b·ªã x·ªá, n√¢ng cao h∆°n ch√∫t.")
        score -= 20
        color = (0, 0, 255)
    elif angle > 190:
        issues.append("L∆∞ng cong qu√°, si·∫øt core l·∫°i.")
        score -= 15
        color = (0, 255, 255)

    if frame is not None and issues:
        draw_colored_line(frame, left_shoulder, left_hip, color)
        draw_colored_line(frame, left_hip, left_ankle, color)

    feedback, tone = feedback_manager.get_feedback("plank", score, issues)
    return score, feedback, tone

# ======================
# ü™∂ Sit-up Evaluation
# ======================
def evaluate_situp(keypoints, frame=None, stage=None, counter=None):
    """
    ƒê√°nh gi√° ƒë·ªông t√°c Sit-up:
    - Ki·ªÉm tra ƒë·ªô s√¢u khi g·∫≠p ng∆∞·ªùi (vai ‚Äì h√¥ng ‚Äì g·ªëi)
    - Ki·ªÉm tra ƒë·ªô th·∫≥ng khi n·∫±m xu·ªëng
    - Ph·∫£n h·ªìi khi ho√†n th√†nh rep (up)
    """

    left_shoulder, right_shoulder = keypoints[5], keypoints[6]
    left_hip, right_hip = keypoints[11], keypoints[12]
    left_knee, right_knee = keypoints[13], keypoints[14]
    left_ear, right_ear = keypoints[3], keypoints[4] if len(keypoints) > 4 else (left_shoulder, right_shoulder)

    # G√≥c gi·ªØa th√¢n v√† ƒë√πi
    left_angle = calculate_angle(left_shoulder, left_hip, left_knee)
    right_angle = calculate_angle(right_shoulder, right_hip, right_knee)
    mean_angle = (left_angle + right_angle) / 2

    issues, score = [], 100
    ok_color, warn_color, err_color = (0, 255, 0), (0, 255, 255), (0, 0, 255)

    # Ghi nh·∫≠n ƒë·ªô s√¢u khi ƒëang xu·ªëng
    if stage == "down":
        form_memory["rep_active"] = True
        if (form_memory.get("lowest_angle") is None) or (mean_angle < form_memory["lowest_angle"]):
            form_memory["lowest_angle"] = mean_angle

    # Khi v·ª´a ng·ªìi d·∫≠y (stage == "up")
    if stage == "up" and form_memory.get("rep_active", False):
        lowest_angle = form_memory.get("lowest_angle", mean_angle)

        # 1Ô∏è‚É£ ƒê·ªô s√¢u: g·∫≠p ch∆∞a ƒë·ªß
        if lowest_angle > 130:
            issues.append("Ch∆∞a g·∫≠p ng∆∞·ªùi ƒë·ªß s√¢u, c·ªë g·∫Øng ch·∫°m g·ªëi ho·∫∑c cao h∆°n.")
            score -= 25
            if frame is not None:
                draw_colored_line(frame, left_shoulder, left_hip, err_color)
                draw_colored_line(frame, right_shoulder, right_hip, err_color)

        # 2Ô∏è‚É£ ƒê·ªô th·∫≥ng khi n·∫±m xu·ªëng: ki·ªÉm tra head-hip-knee khi du·ªói ra
        head_y = (left_ear[1] + right_ear[1]) / 2
        hip_y = (left_hip[1] + right_hip[1]) / 2
        if head_y < hip_y - 40:  # ƒë·∫ßu kh√¥ng c√πng m·∫∑t ph·∫≥ng khi n·∫±m xu·ªëng
            issues.append("Th·∫£ ƒë·∫ßu qu√° m·∫°nh, ki·ªÉm so√°t h·∫° ng∆∞·ªùi xu·ªëng.")
            score -= 15

        # 3Ô∏è‚É£ ƒê·ªô ·ªïn ƒë·ªãnh: ki·ªÉm tra vai kh√¥ng l·ªách
        shoulder_diff = abs(left_shoulder[1] - right_shoulder[1])
        if shoulder_diff > 40:
            issues.append("Gi·ªØ vai c√¢n b·∫±ng khi g·∫≠p ng∆∞·ªùi.")
            score -= 10

        # AI Feedback
        feedback, tone = feedback_manager.get_feedback("situp", score, issues)

        # Reset tr·∫°ng th√°i cho rep ti·∫øp theo
        form_memory["rep_active"] = False
        form_memory["lowest_angle"] = None

        return score, feedback, tone

    # N·∫øu ch∆∞a ho√†n th√†nh rep, gi·ªØ nguy√™n feedback c≈©
    return 100, feedback_manager.last_feedback, "neutral"